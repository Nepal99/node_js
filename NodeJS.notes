
***********
Node.js W3 schools
*********

#################

***	Introduction

#################


*Node.js is an open source server framework.
*Node.js allows you to run JavaScript on the server.

What is node.js?

	1. node.js is an open source server framework.
	2. It is free
	3. It runs on various platforms
	4. It uses JavaScript on the server.

Why Node.js?

	Because It uses asynchronous programming.
	
	A common task for a web server can be to open a file on the server and return the content to the client.
	Here is how PHP or ASP handles a file request:
		1. Sends the task to the computer's file system.
		2. Waits while the file system opens and reads the file.
		3. Returns the content to the client.
		4. Ready to handle the next request.
	Here is how Node.js handles a file request:
		1. Sends the task to the computer's file system.
		2. Ready to handle the next request.
		3. When the file system has opened and read the file, the server returns the content to the client.
	
	Node.js eliminates the waiting, and simply continues with the next request. 
	
	Node.js runs single-threaded, non-blocking, asynchronously programming, which is very memory efficient.
	
	What Can Node.js Do?
		Node.js can generate dynamic page content
		Node.js can create, open, read, write, delete, and close files on the server
		Node.js can collect form data
		Node.js can add, delete, modify data in your database

	What is a Node.js File?
		Node.js files contain tasks that will be executed on certain events
		A typical event is someone trying to access a port on the server
		Node.js files must be initiated on the server before having any effect
		Node.js files have extension ".js"
		

#########################

***	Node.js Get Started

#########################

	==> Download Node.js
	
	==>	write first application
			var http = require('http');

			http.createServer(function (req, res) {
				res.writeHead(200, {'Content-Type': 'text/html'});
				res.end('Hello World!');
			}).listen(8080); 
	
	Save in myFirst.js
	Run the application	=>	node myFirst.js
	
	It will listen to the port number 8080 on your browser.	: http://localhost:8080
	

##############################

***	Node.js Modules

##############################

	What is a Module in Node.js?
		Consider modules to be the same as JavaScript libraries.
		A set of functions you want to include in your application.
	
	Built-in Modules
		Node.js has a set of built-in modules which you can use without any further installation.
		Look at our Built-in Modules Reference for a complete list of modules
			
				assert
				Provides a set of assertion tests
				buffer
				To handle binary data
				child_process
				To run a child process
				cluster
				To split a single Node process into multiple processes
				crypto
				To handle OpenSSL cryptographic functions
				dgram
				Provides implementation of UDP datagram sockets
				dns
				To do DNS lookups and name resolution functions
				domain
				Deprecated. To handle unhandled errors
				events
				To handle events
				fs
				To handle the file system
				http
				To make Node.js act as an HTTP server
				https
				To make Node.js act as an HTTPS server.
				net
				To create servers and clients
				os
				Provides information about the operation system
				path
				To handle file paths
				punycode
				Deprecated. A character encoding scheme
				querystring
				To handle URL query strings
				readline
				To handle readable streams one line at the time
				stream
				To handle streaming data
				string_decoder
				To decode buffer objects into strings
				timers
				To execute a function after a given number of milliseconds
				tls
				To implement TLS and SSL protocols
				tty
				Provides classes used by a text terminal
				url
				To parse URL strings
				util
				To access utility functions
				v8
				To access information about V8 (the JavaScript engine)
				vm
				To compile JavaScript code in a virtual machine
				zlib
				To compress or decompress files
	
	**
	Include Modules
		To include a module, use the require() function with the name of the module:
		var http = require('http'); 
	
	Create Your Own Modules
		You can create your own modules, and easily include them in your applications.-
			
			exports.myDateTime = function () {
				return Date();
			}; 

		Use the "exports" keyword to make properties and methods available outside the module file.
	
	Include Your Own Module
		var dt = require('./myfirstmodule');
		
		Notice that we use ./ to locate the module, that means that the module is located in the same folder as the Node.js file.
	
######################################

***	Node.JS HTTP Module

######################################

	The Built-in HTTP Module

		Node.js has a built-in module called HTTP, which allows Node.js to transfer data over the Hyper Text Transfer Protocol (HTTP).
		
		To include the HTTP module, use the require() method:
		
			var http = require('http'); 
		
	
	Node.js as a Web Server
		
		The HTTP module can create an HTTP server that listens to server ports and gives a response back to the client.
		Use the createServer() method to create an HTTP server:
			
				var http = require('http');

				//create a server object:
				http.createServer(function (req, res) {
				  res.write('Hello World!'); //write a response to the client
				  res.end(); //end the response
				}).listen(8080); //the server object listens on port 8080 
					
			The function passed into the http.createServer() method, will be executed when someone tries to access the computer on port 8080.
			
	Add an HTTP Header
		If the response from the HTTP server is supposed to be displayed as HTML, you should include an HTTP header with the correct content type:
	
			res.writeHead(200, {'Content-Type': 'text/html'});
		
		The first argument of the res.writeHead() method is the status code, 200 means that all is OK, the second argument is an object containing the response headers.
		
		
	Read the Query String
		The function passed into the http.createServer() has a req argument that represents the request from the client, as an object (http.IncomingMessage object).
		This object has a property called "url" which holds the part of the url that comes after the domain name:

		
				var http = require('http');
				http.createServer(function (req, res) {
					res.writeHead(200, {'Content-Type': 'text/html'});
					res.write(req.url);
					res.end();
				}).listen(8080); 
	
	
	
	
	Split the Query String
	
		There are built-in modules to easily split the query string into readable parts, such as the URL module.
				Example
				Split the query string into readable parts:
				var http = require('http');
				var url = require('url');

				http.createServer(function (req, res) {
				  res.writeHead(200, {'Content-Type': 'text/html'});
				  var q = url.parse(req.url, true).query;
				  var txt = q.year + " " + q.month;
				  res.end(txt);
				}).listen(8080);
		

		
		
		
###########################

***** Node.JS File System Module

###########################

	Node.js as a File Server
		
		The Node.js file system module allow you to work with the file system on your computer.
		
		To include the File System module, use the require() method:
			
			var fs = require('fs');
			
		Common use for the File System module:

			Read files
			Create files
			Update files
			Delete files
			Rename files
				
@@@@	Read Files
		
		The "fs.readFile()" method is used to read files on your computer.
	
			var http = require('http');
			var fs   = require('fs');
			
			http.createServer(function(req, res){
				fs.readFile('demofile1.html', function(err,data){
					res.writeHead(200,{
						'Content-Type':'text/html'
					});
					res.write(data);
					res.end("Node.JS demo read file");
				}
			}).listen(8085);
	
	
@@@@	Create Files
	
			The File System module has methods for creating new files:
				
				fs.appendFile()
				fs.open()
				fs.writeFile()
	
	
$$$$		fs.appendFile()
	
			Create a new file using the appendFile() method:
				
				var fs = require('fs');

				fs.appendFile('mynewfile1.txt', 'Hello content!', function (err) {
				  if (err) throw err;
				  console.log('Saved!');
				}); 
				
$$$$		fs.open()
			
			The fs.open() method takes a "flag" as the second argument, if the flag is "w" for "writing", the specified file is opened for writing. If the file does not exist, an empty file is created:
			
				var fs= require('fs');
				
				fs.open('mynewfile2.txt','w',function(err,file){
					if(err)	throw err;
					console.log('Saved!');
				})
				
				
$$$$		fs.writeFile()
	
			The fs.writeFile() method replaces the specified file and content if it exists. If the file does not exist, a new file, containing the specified content, will be created:
			
				var fs = require('fs');

				fs.writeFile('mynewfile3.txt','New Content!!',function(err){
					if(err) throw err;
					console.log('Saved!!!!');
				} );
								
			**	If the file is not existed it will be created.
			
			
			
			
$$$$		Update Files

				The File System module has methods for updating files:

				fs.appendFile()
				fs.writeFile()
				
			The fs.appendFile() method appends the specified content at the end of the specified file

			The fs.writeFile() method replaces the specified file and content
		
$$$$		Delete Files

				To delete a file with the File System module,  use the fs.unlink() method.
				
				The fs.unlink() method deletes the specified file
	
					var fs = require('fs');

					fs.unlink('mynewfile2.txt', function (err) {
					  if (err) throw err;
					  console.log('File deleted!');
					}); 
	
	
$$$$		Rename Files

			To rename a file with the File System module,  use the fs.rename() method.
			The fs.rename() method renames the specified file:
				Example
				Rename "mynewfile1.txt" to "myrenamedfile.txt":
				var fs = require('fs');

				fs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {
				  if (err) throw err;
				  console.log('File Renamed!');
				}); 	
	
####################################

****	Node.JS URL Module	

####################################

	The Built-in URL Module
	
		The URL module splits up a web address into readable parts.
		
		To include the URL module, use the require() method:
	
			var url = require('url'); 
		
		Parse an address with the url.parse() method, and it will return a URL object with each part of the address as properties:
		
			Split a web address into readable parts:
				
				var url = require('url');
				var adr = 'http://localhost:8080/default.htm?year=2017&month=february';
				var q = url.parse(adr, true);

				console.log(q.host); //returns 'localhost:8080'
				console.log(q.pathname); //returns '/default.htm'
				console.log(q.search); //returns '?year=2017&month=february'

				var qdata = q.query; //returns an object: { year: 2017, month: 'february' }
				console.log(qdata.month); //returns 'february'
					
		Node.js File Server
			
			Now we know how to parse the query string, and in the previous chapter we learned how to make Node.js behave as a file server. Let us combine the two, and serve the file requested by the client.
			
			Create two html files and save them in the same folder as your node.js files.
	
				demo_fileserver.js:

					var http = require('http');
					var url = require('url');
					var fs = require('fs');

					http.createServer(function (req, res) {
					  var q = url.parse(req.url, true);
					  var filename = "." + q.pathname;
					  fs.readFile(filename, function(err, data) {
						if (err) {
						  res.writeHead(404, {'Content-Type': 'text/html'});
						  return res.end("404 Not Found");
						}  
						res.writeHead(200, {'Content-Type': 'text/html'});
						res.write(data);
						return res.end();
					  });
					}).listen(8080); 

#################################
**** Node.Js NPM
#################################

What is NPM?
	NPM is a package manager for Node.js packages, or modules if you like.
	www.npmjs.com hosts thousands of free packages to download and use.
	The NPM program is installed on your computer when you install Node.js
	NPM is already ready to run on your computer!

	What is a Package?
	A package in Node.js contains all the files you need for a module.
	Modules are JavaScript libraries you can include in your project.

Download a Package
	Downloading a package is very easy.
	Open the command line interface and tell NPM to download the package you want.
					

################################
****	Node.JS EVENTS
################################

	Node.js is perfect for event-driven applications.					
	
	Events in Node.js
		
		Every action on a computer is an event. Like when a connection is made or a file is opened.
		Objects in Node.js can fire events, like the readStream object fires events when opening and closing a file
	
	Events Module

		Node.js has a built-in module, called "Events", where you can create-, fire-, and listen for- your own events.
		
		To include the built-in Events module use the "require()" method. In addition, all event properties and methods are an instance of an EventEmitter object. To be able to access these properties and methods, create an EventEmitter object:
			
			var events = require('events');
			var eventEmitter = new events.EventEmitter(); 
	
	
	The EventEmitter Object
		
		You can assign event handlers to your own events with the EventEmitter object.
		In the example below we have created a function that will be executed when a "scream" event is fired.
		To fire an event, use the "emit()" method.
			
			Example
				
				var events = require('events');
				var eventEmitter = new events.EventEmitter();

				//Create an event handler:
				var myEventHandler = function () {
				  console.log('I hear a scream!');
				}

				//Assign the event handler to an event:
				eventEmitter.on('scream', myEventHandler);

				//Fire the 'scream' event:
				eventEmitter.emit('scream');
	
####################################

****	Node.JS upload files

####################################

The Formidable Module
	There is a very good module for working with file uploads, called "Formidable".
	The Formidable module can be downloaded and installed using NPM:
		
		C:\Users\Your Name>npm install formidable	
		
		var formidable = require('formidable'); 
	
	
	Example:
			var http = require('http');
			var formidable = require('formidable');
			var fs = require('fs');


			var port = process.env.port||8087;

			const server = createServer(function(req, res){

				if(req.url=='/fileupload'){
					var form = new formidable.IncomingForm();
					form.parse(req, function(err,fields,files){
						var oldPath = files.filetoupload.path;
						var newpath = 'C:\Users\nepal\Desktop\clean\node_js'+file.filetoupload.path;
						fs.rename(oldPath, newpath, function(err){
							if(err){
								throw err;
							}else{
								res.write('file Uploaded and moved!');
								res.end();
							}
						})
						res.write("file Uploaded");
						res.end();
					});
				}else{

				res.writeHead(200, {'Content-Type:'text/html});
				res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
				res.write('<input type="file" name="fileupload"> <br />');
				res.write('<input type="submit">');
				res.write('</form>');
				return res.end();
				}
			});

			server.listen(port);
				
########################
****	Node.js Email
########################

The Nodemailer Module
	The Nodemailer module makes it easy to send emails from your computer.
	The Nodemailer module can be downloaded and installed using npm:
	C:\Users\Your Name>npm install nodemailer
		
		var nodemailer = require('nodemailer'); 
	
	Send an Email
		Now you are ready to send emails from your server.
		Use the username and password from your selected email provider to send an email. This tutorial will show you how to use your Gmail account to send an email:
	
	
	
	
	
	
	
	
	
	
	
	
	
	